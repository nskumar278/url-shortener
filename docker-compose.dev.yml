# ========================================
# Development Docker Compose
# Use: docker compose -f docker-compose.dev.yml up
# ========================================

services:
  nginx-dev:
    image: nginx:alpine
    container_name: url-shortener-nginx-dev
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - url-shortener-dev-app1
      - url-shortener-dev-app2
      - url-shortener-dev-app3
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - url-shortener-network-dev

  url-shortener-dev-app1: &url-shortener-dev-app-template
    build:
      target: builder
    image: url-shortener:dev
    container_name: url-shortener-dev-app1
    # environment: # Use .env file for environment variables
    depends_on:
      mysql-dev:
        condition: service_healthy

    networks:
      - url-shortener-network-dev

    # Enable hot reloading in development
    volumes:
      - ./src:/app/src:ro
      - ./package.json:/app/package.json:ro
      - ./tsconfig.json:/app/tsconfig.json:ro
      - node_modules:/app/node_modules

    # Override command for development
    command: >
      sh -c "npm install && npm run dev"
    ports:
      - "3000:3000"
      - "9229:9229" # Node.js debugger port
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  url-shortener-dev-app2:
    <<: *url-shortener-dev-app-template
    container_name: url-shortener-dev-app2
    ports: [] # No external ports needed, accessed via nginx

  url-shortener-dev-app3:
    <<: *url-shortener-dev-app-template
    container_name: url-shortener-dev-app3
    ports: [] # No external ports needed, accessed via nginx

  mysql-dev:
    image: mysql:8.0
    container_name: url-shortener-db-dev
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: url_shortener_db_dev
      MYSQL_USER: url_shortener_user
      MYSQL_PASSWORD: pass
    ports:
      - "3306:3306"
    volumes:
      - db-data:/var/lib/mysql
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    networks:
      - url-shortener-network-dev
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot" ]
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 40s

  # Redis Cache
  redis-dev:
    image: redis:7-alpine
    container_name: url-shortener-redis-dev
    command: redis-server --requirepass redispass123 --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/var/lib/redis
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "redispass123", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - url-shortener-network-dev
    # Prometheus for monitoring (optional)
  prometheus-dev:
    image: prom/prometheus:latest
    container_name: url-shortener-prometheus-dev
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - url-shortener-network-dev
    depends_on:
      - url-shortener-dev-app1
      - url-shortener-dev-app2
      - url-shortener-dev-app3

  # Grafana for dashboards (optional)
  grafana-dev:
    image: grafana/grafana:latest
    container_name: url-shortener-grafana-dev
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    restart: unless-stopped
    depends_on:
      - prometheus-dev
      - url-shortener-dev-app1
      - url-shortener-dev-app2
      - url-shortener-dev-app3
    networks:
      - url-shortener-network-dev

  migrate-dev:
    build:
      context: .
      dockerfile: Dockerfile.migrate
    container_name: url-shortener-migrate-dev
    environment:
      DB_USERNAME: url_shortener_user
      DB_PASSWORD: pass
      DB_NAME: url_shortener_db_dev
      DB_HOST: mysql-dev
      DB_DIALECT: mysql
    depends_on:
      mysql-dev:
        condition: service_healthy
    networks:
      - url-shortener-network-dev
    profiles:
      - migration
    restart: "no"

networks:
  url-shortener-network-dev:
    driver: bridge

volumes:
  node_modules:
  db-data:
  redis-data:
  prometheus-data:
  grafana-data:
